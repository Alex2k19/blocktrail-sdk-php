<?php

namespace Blocktrail\SDK;

use Blocktrail\SDK\Bitcoin\BIP32Key;
use Blocktrail\SDK\Bitcoin\BIP32Path;

/**
 * Interface Wallet
 */
interface WalletInterface {

    /**
     * @param BlocktrailSDKInterface        $sdk                        SDK instance used to do requests
     * @param string                        $identifier                 identifier of the wallet
     * @param string                        $primaryMnemonic
     * @param array[string, string]         $primaryPrivateKey          should be BIP32 master key m/
     * @param array[string, string]         $backupPublicKey            should be BIP32 master public key M/
     * @param array[array[string, string]]  $blocktrailPublicKeys
     * @param int                           $keyIndex
     * @param bool                          $testnet
     */
    public function __construct(BlocktrailSDKInterface $sdk, $identifier, $primaryMnemonic, $primaryPrivateKey, $backupPublicKey, $blocktrailPublicKeys, $keyIndex, $testnet);

    /**
     * return the wallet identifier
     *
     * @return string
     */
    public function getIdentifier();

    /**
     * return the wallet primary mnemonic (for backup purposes)
     *
     * @return string
     */
    public function getPrimaryMnemonic();

    /**
     * return list of Blocktrail co-sign extended public keys
     *
     * @return array[]      [ [xpub, path] ]
     */
    public function getBlocktrailPublicKeys();

    /**
     * upgrade wallet to different blocktrail cosign key
     *
     * @param $keyIndex
     * @throws \Exception
     */
    public function upgradeKeyIndex($keyIndex);

    /**
     * get address for the specified path
     *
     * @param string|BIP32Path  $path
     * @return string
     */
    public function getAddressByPath($path);

    /**
     * get address and redeemScript for specified path
     *
     * @param string    $path
     * @return array[string, string]     [address, redeemScript]
     */
    public function getRedeemScriptByPath($path);

    /**
     * @param string|BIP32Path  $path
     * @return BIP32Key
     * @throws \Exception
     */
    public function getBlocktrailPublicKey($path);

    /**
     * generate a new derived key and return the new path and address for it
     *
     * @return string[]     [path, address]
     */
    public function getNewAddressPair();

    /**
     * generate a new derived private key and return the new address for it
     *
     * @return string
     */
    public function getNewAddress();

    /**
     * get the balance for the wallet
     *
     * @return int[]            [confirmed, unconfirmed]
     */
    public function getBalance();

    /**
     * do wallet discovery (slow)
     *
     * @return int[]            [confirmed, unconfirmed]
     */
    public function doDiscovery();

    /**
     * create, sign and send a transaction
     *
     * @param array  $pay               array['address' => int] coins to send
     * @param string $changeAddress     (optional) change address to use (autogenerated if NULL)
     * @param bool   $allowZeroConf
     * @return string                   the txid / transaction hash
     * @throws \Exception
     */
    public function pay(array $pay, $changeAddress = null, $allowZeroConf = false);

    /**
     * delete the wallet
     *
     * @return mixed
     */
    public function deleteWallet();
}
